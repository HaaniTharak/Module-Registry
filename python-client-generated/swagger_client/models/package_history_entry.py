# coding: utf-8

"""
    ECE 461 - Fall 2021 - Project 2

    API for ECE 461/Fall 2021/Project 2: A Trustworthy Module Registry  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: davisjam@purdue.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PackageHistoryEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user': 'User',
        '_date': 'datetime',
        'package_metadata': 'PackageMetadata',
        'action': 'str'
    }

    attribute_map = {
        'user': 'User',
        '_date': 'Date',
        'package_metadata': 'PackageMetadata',
        'action': 'Action'
    }

    def __init__(self, user=None, _date=None, package_metadata=None, action=None):  # noqa: E501
        """PackageHistoryEntry - a model defined in Swagger"""  # noqa: E501
        self._user = None
        self.__date = None
        self._package_metadata = None
        self._action = None
        self.discriminator = None
        self.user = user
        self._date = _date
        self.package_metadata = package_metadata
        self.action = action

    @property
    def user(self):
        """Gets the user of this PackageHistoryEntry.  # noqa: E501


        :return: The user of this PackageHistoryEntry.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this PackageHistoryEntry.


        :param user: The user of this PackageHistoryEntry.  # noqa: E501
        :type: User
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def _date(self):
        """Gets the _date of this PackageHistoryEntry.  # noqa: E501

        Date of activity.  # noqa: E501

        :return: The _date of this PackageHistoryEntry.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this PackageHistoryEntry.

        Date of activity.  # noqa: E501

        :param _date: The _date of this PackageHistoryEntry.  # noqa: E501
        :type: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def package_metadata(self):
        """Gets the package_metadata of this PackageHistoryEntry.  # noqa: E501


        :return: The package_metadata of this PackageHistoryEntry.  # noqa: E501
        :rtype: PackageMetadata
        """
        return self._package_metadata

    @package_metadata.setter
    def package_metadata(self, package_metadata):
        """Sets the package_metadata of this PackageHistoryEntry.


        :param package_metadata: The package_metadata of this PackageHistoryEntry.  # noqa: E501
        :type: PackageMetadata
        """
        if package_metadata is None:
            raise ValueError("Invalid value for `package_metadata`, must not be `None`")  # noqa: E501

        self._package_metadata = package_metadata

    @property
    def action(self):
        """Gets the action of this PackageHistoryEntry.  # noqa: E501


        :return: The action of this PackageHistoryEntry.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this PackageHistoryEntry.


        :param action: The action of this PackageHistoryEntry.  # noqa: E501
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501
        allowed_values = ["CREATE", "UPDATE", "DOWNLOAD", "RATE"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PackageHistoryEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackageHistoryEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
