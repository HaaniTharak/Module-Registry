# coding: utf-8

"""
    ECE 461 - Fall 2021 - Project 2

    API for ECE 461/Fall 2021/Project 2: A Trustworthy Module Registry  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: davisjam@purdue.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PackageRating(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bus_factor': 'float',
        'correctness': 'float',
        'ramp_up': 'float',
        'responsive_maintainer': 'float',
        'license_score': 'float',
        'good_pinning_practice': 'float'
    }

    attribute_map = {
        'bus_factor': 'BusFactor',
        'correctness': 'Correctness',
        'ramp_up': 'RampUp',
        'responsive_maintainer': 'ResponsiveMaintainer',
        'license_score': 'LicenseScore',
        'good_pinning_practice': 'GoodPinningPractice'
    }

    def __init__(self, bus_factor=None, correctness=None, ramp_up=None, responsive_maintainer=None, license_score=None, good_pinning_practice=None):  # noqa: E501
        """PackageRating - a model defined in Swagger"""  # noqa: E501
        self._bus_factor = None
        self._correctness = None
        self._ramp_up = None
        self._responsive_maintainer = None
        self._license_score = None
        self._good_pinning_practice = None
        self.discriminator = None
        self.bus_factor = bus_factor
        self.correctness = correctness
        self.ramp_up = ramp_up
        self.responsive_maintainer = responsive_maintainer
        self.license_score = license_score
        self.good_pinning_practice = good_pinning_practice

    @property
    def bus_factor(self):
        """Gets the bus_factor of this PackageRating.  # noqa: E501


        :return: The bus_factor of this PackageRating.  # noqa: E501
        :rtype: float
        """
        return self._bus_factor

    @bus_factor.setter
    def bus_factor(self, bus_factor):
        """Sets the bus_factor of this PackageRating.


        :param bus_factor: The bus_factor of this PackageRating.  # noqa: E501
        :type: float
        """
        if bus_factor is None:
            raise ValueError("Invalid value for `bus_factor`, must not be `None`")  # noqa: E501

        self._bus_factor = bus_factor

    @property
    def correctness(self):
        """Gets the correctness of this PackageRating.  # noqa: E501


        :return: The correctness of this PackageRating.  # noqa: E501
        :rtype: float
        """
        return self._correctness

    @correctness.setter
    def correctness(self, correctness):
        """Sets the correctness of this PackageRating.


        :param correctness: The correctness of this PackageRating.  # noqa: E501
        :type: float
        """
        if correctness is None:
            raise ValueError("Invalid value for `correctness`, must not be `None`")  # noqa: E501

        self._correctness = correctness

    @property
    def ramp_up(self):
        """Gets the ramp_up of this PackageRating.  # noqa: E501


        :return: The ramp_up of this PackageRating.  # noqa: E501
        :rtype: float
        """
        return self._ramp_up

    @ramp_up.setter
    def ramp_up(self, ramp_up):
        """Sets the ramp_up of this PackageRating.


        :param ramp_up: The ramp_up of this PackageRating.  # noqa: E501
        :type: float
        """
        if ramp_up is None:
            raise ValueError("Invalid value for `ramp_up`, must not be `None`")  # noqa: E501

        self._ramp_up = ramp_up

    @property
    def responsive_maintainer(self):
        """Gets the responsive_maintainer of this PackageRating.  # noqa: E501


        :return: The responsive_maintainer of this PackageRating.  # noqa: E501
        :rtype: float
        """
        return self._responsive_maintainer

    @responsive_maintainer.setter
    def responsive_maintainer(self, responsive_maintainer):
        """Sets the responsive_maintainer of this PackageRating.


        :param responsive_maintainer: The responsive_maintainer of this PackageRating.  # noqa: E501
        :type: float
        """
        if responsive_maintainer is None:
            raise ValueError("Invalid value for `responsive_maintainer`, must not be `None`")  # noqa: E501

        self._responsive_maintainer = responsive_maintainer

    @property
    def license_score(self):
        """Gets the license_score of this PackageRating.  # noqa: E501


        :return: The license_score of this PackageRating.  # noqa: E501
        :rtype: float
        """
        return self._license_score

    @license_score.setter
    def license_score(self, license_score):
        """Sets the license_score of this PackageRating.


        :param license_score: The license_score of this PackageRating.  # noqa: E501
        :type: float
        """
        if license_score is None:
            raise ValueError("Invalid value for `license_score`, must not be `None`")  # noqa: E501

        self._license_score = license_score

    @property
    def good_pinning_practice(self):
        """Gets the good_pinning_practice of this PackageRating.  # noqa: E501

        The fraction of its dependencies that are pinned to at least a specific major+minor version, e.g. version 2.3.X of a package. (If there are zero dependencies, they should receive a 1.0 rating. If there are two dependencies, one pinned to this degree, then they should receive a Â½ = 0.5 rating).  # noqa: E501

        :return: The good_pinning_practice of this PackageRating.  # noqa: E501
        :rtype: float
        """
        return self._good_pinning_practice

    @good_pinning_practice.setter
    def good_pinning_practice(self, good_pinning_practice):
        """Sets the good_pinning_practice of this PackageRating.

        The fraction of its dependencies that are pinned to at least a specific major+minor version, e.g. version 2.3.X of a package. (If there are zero dependencies, they should receive a 1.0 rating. If there are two dependencies, one pinned to this degree, then they should receive a Â½ = 0.5 rating).  # noqa: E501

        :param good_pinning_practice: The good_pinning_practice of this PackageRating.  # noqa: E501
        :type: float
        """
        if good_pinning_practice is None:
            raise ValueError("Invalid value for `good_pinning_practice`, must not be `None`")  # noqa: E501

        self._good_pinning_practice = good_pinning_practice

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PackageRating, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackageRating):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
