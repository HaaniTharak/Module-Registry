# coding: utf-8

"""
    ECE 461 - Fall 2021 - Project 2

    API for ECE 461/Fall 2021/Project 2: A Trustworthy Module Registry  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: davisjam@purdue.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PackageData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content': 'str',
        'url': 'str',
        'js_program': 'str'
    }

    attribute_map = {
        'content': 'Content',
        'url': 'URL',
        'js_program': 'JSProgram'
    }

    def __init__(self, content=None, url=None, js_program=None):  # noqa: E501
        """PackageData - a model defined in Swagger"""  # noqa: E501
        self._content = None
        self._url = None
        self._js_program = None
        self.discriminator = None
        if content is not None:
            self.content = content
        if url is not None:
            self.url = url
        if js_program is not None:
            self.js_program = js_program

    @property
    def content(self):
        """Gets the content of this PackageData.  # noqa: E501

        Package contents. This is the zip file uploaded by the user. (Encoded as text using a Base64 encoding).  This will be a zipped version of an npm package's GitHub repository, minus the \".git/\" directory.\" It will, for example, include the \"package.json\" file that can be used to retrieve the project homepage.  See https://docs.npmjs.com/cli/v7/configuring-npm/package-json#homepage.  # noqa: E501

        :return: The content of this PackageData.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this PackageData.

        Package contents. This is the zip file uploaded by the user. (Encoded as text using a Base64 encoding).  This will be a zipped version of an npm package's GitHub repository, minus the \".git/\" directory.\" It will, for example, include the \"package.json\" file that can be used to retrieve the project homepage.  See https://docs.npmjs.com/cli/v7/configuring-npm/package-json#homepage.  # noqa: E501

        :param content: The content of this PackageData.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def url(self):
        """Gets the url of this PackageData.  # noqa: E501

        Package URL (for use in public ingest).  # noqa: E501

        :return: The url of this PackageData.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PackageData.

        Package URL (for use in public ingest).  # noqa: E501

        :param url: The url of this PackageData.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def js_program(self):
        """Gets the js_program of this PackageData.  # noqa: E501

        A JavaScript program (for use with sensitive modules).  # noqa: E501

        :return: The js_program of this PackageData.  # noqa: E501
        :rtype: str
        """
        return self._js_program

    @js_program.setter
    def js_program(self, js_program):
        """Sets the js_program of this PackageData.

        A JavaScript program (for use with sensitive modules).  # noqa: E501

        :param js_program: The js_program of this PackageData.  # noqa: E501
        :type: str
        """

        self._js_program = js_program

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PackageData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackageData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
